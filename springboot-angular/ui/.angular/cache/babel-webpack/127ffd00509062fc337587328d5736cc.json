{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Inject, NgModule, Optional, SkipSelf } from '@angular/core';\nimport { ReplaySubject, AsyncSubject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { __awaiter } from 'tslib';\n\nclass BaseLoginProvider {\n  constructor() {}\n\n  loadScript(id, src, onload, parentElement = null) {\n    // get document if platform is only browser\n    if (typeof document !== 'undefined' && !document.getElementById(id)) {\n      let signInJS = document.createElement('script');\n      signInJS.async = true;\n      signInJS.src = src;\n      signInJS.onload = onload;\n\n      if (!parentElement) {\n        parentElement = document.head;\n      }\n\n      parentElement.appendChild(signInJS);\n    }\n  }\n\n}\n\nclass SocialUser {}\n\nlet GoogleLoginProvider = /*#__PURE__*/(() => {\n  class GoogleLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n      scope: 'email'\n    }) {\n      super();\n      this.clientId = clientId;\n      this.initOptions = initOptions;\n    }\n\n    initialize() {\n      return new Promise((resolve, reject) => {\n        try {\n          this.loadScript(GoogleLoginProvider.PROVIDER_ID, 'https://apis.google.com/js/platform.js', () => {\n            gapi.load('auth2', () => {\n              this.auth2 = gapi.auth2.init(Object.assign(Object.assign({}, this.initOptions), {\n                client_id: this.clientId\n              }));\n              this.auth2.then(() => {\n                resolve();\n              }).catch(err => {\n                reject(err);\n              });\n            });\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n\n    getLoginStatus(loginStatusOptions) {\n      const options = Object.assign(Object.assign({}, this.initOptions), loginStatusOptions);\n      return new Promise((resolve, reject) => {\n        if (this.auth2.isSignedIn.get()) {\n          let user = new SocialUser();\n          const profile = this.auth2.currentUser.get().getBasicProfile();\n          const authResponse = this.auth2.currentUser.get().getAuthResponse(true); // get complete authResponse object\n\n          user.id = profile.getId();\n          user.name = profile.getName();\n          user.email = profile.getEmail();\n          user.photoUrl = profile.getImageUrl();\n          user.firstName = profile.getGivenName();\n          user.lastName = profile.getFamilyName();\n          user.response = authResponse;\n\n          const resolveUser = authResponse => {\n            user.authToken = authResponse.access_token;\n            user.idToken = authResponse.id_token;\n            resolve(user);\n          };\n\n          if (options.refreshToken) {\n            this.auth2.currentUser.get().reloadAuthResponse().then(resolveUser);\n          } else {\n            const authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n            resolveUser(authResponse);\n          }\n        } else {\n          reject(`No user is currently logged in with ${GoogleLoginProvider.PROVIDER_ID}`);\n        }\n      });\n    }\n\n    signIn(signInOptions) {\n      const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n      return new Promise((resolve, reject) => {\n        const offlineAccess = options && options.offline_access;\n        let promise = !offlineAccess ? this.auth2.signIn(signInOptions) : this.auth2.grantOfflineAccess(signInOptions);\n        promise.then(response => {\n          let user = new SocialUser();\n\n          if (response && response.code) {\n            user.authorizationCode = response.code;\n          } else {\n            let profile = this.auth2.currentUser.get().getBasicProfile();\n            let authResponse = this.auth2.currentUser.get().getAuthResponse(true);\n            let token = authResponse.access_token;\n            let backendToken = authResponse.id_token;\n            user.id = profile.getId();\n            user.name = profile.getName();\n            user.email = profile.getEmail();\n            user.photoUrl = profile.getImageUrl();\n            user.firstName = profile.getGivenName();\n            user.lastName = profile.getFamilyName();\n            user.authToken = token;\n            user.idToken = backendToken;\n            user.response = authResponse;\n          }\n\n          resolve(user);\n        }, closed => {\n          reject(closed);\n        }).catch(err => {\n          reject(err);\n        });\n      });\n    }\n\n    signOut(revoke) {\n      return new Promise((resolve, reject) => {\n        let signOutPromise;\n\n        if (revoke) {\n          signOutPromise = this.auth2.disconnect();\n        } else {\n          signOutPromise = this.auth2.signOut();\n        }\n\n        signOutPromise.then(err => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve();\n          }\n        }).catch(err => {\n          reject(err);\n        });\n      });\n    }\n\n  }\n\n  GoogleLoginProvider.PROVIDER_ID = 'GOOGLE';\n  /**\n   * The service encapsulating the social login functionality. Exposes methods like\n   * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n   * subscribe to get the current logged in user information.\n   *\n   * @dynamic\n   */\n\n  return GoogleLoginProvider;\n})();\nlet SocialAuthService = /*#__PURE__*/(() => {\n  class SocialAuthService {\n    /**\n     * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n     */\n    constructor(config) {\n      this.providers = new Map();\n      this.autoLogin = false;\n      this._user = null;\n      this._authState = new ReplaySubject(1);\n      /* Consider making this an enum comprising LOADING, LOADED, FAILED etc. */\n\n      this.initialized = false;\n      this._initState = new AsyncSubject();\n\n      if (config instanceof Promise) {\n        config.then(config => {\n          this.initialize(config);\n        });\n      } else {\n        this.initialize(config);\n      }\n    }\n    /** An `Observable` that one can subscribe to get the current logged in user information */\n\n\n    get authState() {\n      return this._authState.asObservable();\n    }\n    /** An `Observable` to communicate the readiness of the service and associated login providers */\n\n\n    get initState() {\n      return this._initState.asObservable();\n    }\n\n    initialize(config) {\n      this.autoLogin = config.autoLogin !== undefined ? config.autoLogin : false;\n      const {\n        onError = console.error\n      } = config;\n      config.providers.forEach(item => {\n        this.providers.set(item.id, item.provider);\n      });\n      Promise.all(Array.from(this.providers.values()).map(provider => provider.initialize())).then(() => {\n        if (this.autoLogin) {\n          const loginStatusPromises = [];\n          let loggedIn = false;\n          this.providers.forEach((provider, key) => {\n            let promise = provider.getLoginStatus();\n            loginStatusPromises.push(promise);\n            promise.then(user => {\n              user.provider = key;\n              this._user = user;\n\n              this._authState.next(user);\n\n              loggedIn = true;\n            }).catch(console.debug);\n          });\n          Promise.all(loginStatusPromises).catch(() => {\n            if (!loggedIn) {\n              this._user = null;\n\n              this._authState.next(null);\n            }\n          });\n        }\n      }).catch(error => {\n        onError(error);\n      }).finally(() => {\n        this.initialized = true;\n\n        this._initState.next(this.initialized);\n\n        this._initState.complete();\n      });\n    }\n\n    refreshAuthToken(providerId) {\n      return new Promise((resolve, reject) => {\n        if (!this.initialized) {\n          reject(SocialAuthService.ERR_NOT_INITIALIZED);\n        } else if (providerId !== GoogleLoginProvider.PROVIDER_ID) {\n          reject(SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN);\n        } else {\n          const providerObject = this.providers.get(providerId);\n\n          if (providerObject) {\n            providerObject.getLoginStatus({\n              refreshToken: true\n            }).then(user => {\n              user.provider = providerId;\n              this._user = user;\n\n              this._authState.next(user);\n\n              resolve();\n            }).catch(err => {\n              reject(err);\n            });\n          } else {\n            reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n          }\n        }\n      });\n    }\n    /**\n     * A method used to sign in a user with a specific `LoginProvider`.\n     *\n     * @param providerId Id with which the `LoginProvider` has been registered with the service\n     * @param signInOptions Optional `LoginProvider` specific arguments\n     * @returns A `Promise` that resolves to the authenticated user information\n     */\n\n\n    signIn(providerId, signInOptions) {\n      return new Promise((resolve, reject) => {\n        if (!this.initialized) {\n          reject(SocialAuthService.ERR_NOT_INITIALIZED);\n        } else {\n          let providerObject = this.providers.get(providerId);\n\n          if (providerObject) {\n            providerObject.signIn(signInOptions).then(user => {\n              user.provider = providerId;\n              resolve(user);\n              this._user = user;\n\n              this._authState.next(user);\n            }).catch(err => {\n              reject(err);\n            });\n          } else {\n            reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n          }\n        }\n      });\n    }\n    /**\n     * A method used to sign out the currently loggen in user.\n     *\n     * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n     */\n\n\n    signOut(revoke = false) {\n      return new Promise((resolve, reject) => {\n        if (!this.initialized) {\n          reject(SocialAuthService.ERR_NOT_INITIALIZED);\n        } else if (!this._user) {\n          reject(SocialAuthService.ERR_NOT_LOGGED_IN);\n        } else {\n          let providerId = this._user.provider;\n          let providerObject = this.providers.get(providerId);\n\n          if (providerObject) {\n            providerObject.signOut(revoke).then(() => {\n              resolve();\n              this._user = null;\n\n              this._authState.next(null);\n            }).catch(err => {\n              reject(err);\n            });\n          } else {\n            reject(SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND);\n          }\n        }\n      });\n    }\n\n  }\n\n  SocialAuthService.ERR_LOGIN_PROVIDER_NOT_FOUND = 'Login provider not found';\n  SocialAuthService.ERR_NOT_LOGGED_IN = 'Not logged in';\n  SocialAuthService.ERR_NOT_INITIALIZED = 'Login providers not ready yet. Are there errors on your console?';\n  SocialAuthService.ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN = 'Chosen login provider is not supported for refreshing a token';\n\n  SocialAuthService.ɵfac = function SocialAuthService_Factory(t) {\n    return new (t || SocialAuthService)(i0.ɵɵinject('SocialAuthServiceConfig'));\n  };\n\n  SocialAuthService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SocialAuthService,\n    factory: SocialAuthService.ɵfac\n  });\n  return SocialAuthService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The main module of angularx-social-login library.\n */\n\n\nlet SocialLoginModule = /*#__PURE__*/(() => {\n  class SocialLoginModule {\n    constructor(parentModule) {\n      if (parentModule) {\n        throw new Error('SocialLoginModule is already loaded. Import it in the AppModule only');\n      }\n    }\n\n    static initialize(config) {\n      return {\n        ngModule: SocialLoginModule,\n        providers: [SocialAuthService, {\n          provide: 'SocialAuthServiceConfig',\n          useValue: config\n        }]\n      };\n    }\n\n  }\n\n  SocialLoginModule.ɵfac = function SocialLoginModule_Factory(t) {\n    return new (t || SocialLoginModule)(i0.ɵɵinject(SocialLoginModule, 12));\n  };\n\n  SocialLoginModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SocialLoginModule\n  });\n  SocialLoginModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [SocialAuthService],\n    imports: [[CommonModule]]\n  });\n  return SocialLoginModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // Simulates login / logout without actually requiring an Internet connection.\n//\n// Useful for certain development situations.\n//\n// For example, if you want to simulate the greatest football referee England has ever produced:\n//\n//  const dummyUser: SocialUser = {\n//     id: '0123456789',\n//     name: 'Howard Webb',\n//     email: 'howard@webb.com',\n//     firstName: 'Howard',\n//     lastName: 'Webb',\n//     authToken: 'dummyAuthToken',\n//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',\n//     provider: 'DUMMY',\n//     idToken: 'dummyIdToken',\n//     authorizationCode: 'dummyAuthCode'\n// };\n//\n//  let config = new AuthServiceConfig([\n//  { ... },\n//  {\n//       id: DummyLoginProvider.PROVIDER_ID,\n//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor\n//   },\n//  { ... }\n//  ]);\n\n\nlet DummyLoginProvider = /*#__PURE__*/(() => {\n  class DummyLoginProvider extends BaseLoginProvider {\n    constructor(dummy) {\n      super();\n\n      if (dummy) {\n        this.dummy = dummy;\n      } else {\n        this.dummy = DummyLoginProvider.DEFAULT_USER;\n      } // Start not logged in\n\n\n      this.loggedIn = false;\n    }\n\n    getLoginStatus() {\n      return new Promise((resolve, reject) => {\n        if (this.loggedIn) {\n          resolve(this.dummy);\n        } else {\n          reject('No user is currently logged in.');\n        }\n      });\n    }\n\n    initialize() {\n      return new Promise((resolve, reject) => {\n        resolve();\n      });\n    }\n\n    signIn() {\n      return new Promise((resolve, reject) => {\n        this.loggedIn = true;\n        resolve(this.dummy);\n      });\n    }\n\n    signOut(revoke) {\n      return new Promise((resolve, reject) => {\n        this.loggedIn = false;\n        resolve();\n      });\n    }\n\n  }\n\n  DummyLoginProvider.PROVIDER_ID = 'DUMMY';\n  DummyLoginProvider.DEFAULT_USER = {\n    id: '1234567890',\n    name: 'Mickey Mouse',\n    email: 'mickey@mouse.com',\n    firstName: 'Mickey',\n    lastName: 'Mouse',\n    authToken: 'dummyAuthToken',\n    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',\n    provider: 'DUMMY',\n    idToken: 'dummyIdToken',\n    authorizationCode: 'dummyAuthCode',\n    response: {}\n  };\n  return DummyLoginProvider;\n})();\nlet FacebookLoginProvider = /*#__PURE__*/(() => {\n  class FacebookLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {}) {\n      super();\n      this.clientId = clientId;\n      this.requestOptions = {\n        scope: 'email,public_profile',\n        locale: 'en_US',\n        fields: 'name,email,picture,first_name,last_name',\n        version: 'v10.0'\n      };\n      this.requestOptions = Object.assign(Object.assign({}, this.requestOptions), initOptions);\n    }\n\n    initialize() {\n      return new Promise((resolve, reject) => {\n        try {\n          this.loadScript(FacebookLoginProvider.PROVIDER_ID, `//connect.facebook.net/${this.requestOptions.locale}/sdk.js`, () => {\n            FB.init({\n              appId: this.clientId,\n              autoLogAppEvents: true,\n              cookie: true,\n              xfbml: true,\n              version: this.requestOptions.version\n            });\n            resolve();\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n\n    getLoginStatus() {\n      return new Promise((resolve, reject) => {\n        FB.getLoginStatus(response => {\n          if (response.status === 'connected') {\n            let authResponse = response.authResponse;\n            FB.api(`/me?fields=${this.requestOptions.fields}`, fbUser => {\n              let user = new SocialUser();\n              user.id = fbUser.id;\n              user.name = fbUser.name;\n              user.email = fbUser.email;\n              user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal&access_token=' + authResponse.accessToken;\n              user.firstName = fbUser.first_name;\n              user.lastName = fbUser.last_name;\n              user.authToken = authResponse.accessToken;\n              user.response = fbUser;\n              resolve(user);\n            });\n          } else {\n            reject(`No user is currently logged in with ${FacebookLoginProvider.PROVIDER_ID}`);\n          }\n        });\n      });\n    }\n\n    signIn(signInOptions) {\n      const options = Object.assign(Object.assign({}, this.requestOptions), signInOptions);\n      return new Promise((resolve, reject) => {\n        FB.login(response => {\n          if (response.authResponse) {\n            let authResponse = response.authResponse;\n            FB.api(`/me?fields=${options.fields}`, fbUser => {\n              let user = new SocialUser();\n              user.id = fbUser.id;\n              user.name = fbUser.name;\n              user.email = fbUser.email;\n              user.photoUrl = 'https://graph.facebook.com/' + fbUser.id + '/picture?type=normal';\n              user.firstName = fbUser.first_name;\n              user.lastName = fbUser.last_name;\n              user.authToken = authResponse.accessToken;\n              user.response = fbUser;\n              resolve(user);\n            });\n          } else {\n            reject('User cancelled login or did not fully authorize.');\n          }\n        }, options);\n      });\n    }\n\n    signOut() {\n      return new Promise((resolve, reject) => {\n        FB.logout(response => {\n          resolve();\n        });\n      });\n    }\n\n  }\n\n  FacebookLoginProvider.PROVIDER_ID = 'FACEBOOK';\n  return FacebookLoginProvider;\n})();\nlet AmazonLoginProvider = /*#__PURE__*/(() => {\n  class AmazonLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n      scope: 'profile',\n      scope_data: {\n        profile: {\n          essential: false\n        }\n      },\n      redirect_uri: location.origin\n    }) {\n      super();\n      this.clientId = clientId;\n      this.initOptions = initOptions;\n    }\n\n    initialize() {\n      let amazonRoot = null;\n\n      if (document) {\n        amazonRoot = document.createElement('div');\n        amazonRoot.id = 'amazon-root';\n        document.body.appendChild(amazonRoot);\n      }\n\n      window.onAmazonLoginReady = () => {\n        amazon.Login.setClientId(this.clientId);\n      };\n\n      return new Promise((resolve, reject) => {\n        try {\n          this.loadScript('amazon-login-sdk', 'https://assets.loginwithamazon.com/sdk/na/login1.js', () => {\n            resolve();\n          }, amazonRoot);\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n\n    getLoginStatus() {\n      return new Promise((resolve, reject) => {\n        let token = this.retrieveToken();\n\n        if (token) {\n          amazon.Login.retrieveProfile(token, response => {\n            if (response.success) {\n              let user = new SocialUser();\n              user.id = response.profile.CustomerId;\n              user.name = response.profile.Name;\n              user.email = response.profile.PrimaryEmail;\n              user.response = response.profile;\n              resolve(user);\n            } else {\n              reject(response.error);\n            }\n          });\n        } else {\n          reject(`No user is currently logged in with ${AmazonLoginProvider.PROVIDER_ID}`);\n        }\n      });\n    }\n\n    signIn(signInOptions) {\n      const options = Object.assign(Object.assign({}, this.initOptions), signInOptions);\n      return new Promise((resolve, reject) => {\n        amazon.Login.authorize(options, authResponse => {\n          if (authResponse.error) {\n            reject(authResponse.error);\n          } else {\n            amazon.Login.retrieveProfile(authResponse.access_token, response => {\n              let user = new SocialUser();\n              user.id = response.profile.CustomerId;\n              user.name = response.profile.Name;\n              user.email = response.profile.PrimaryEmail;\n              user.authToken = authResponse.access_token;\n              user.response = response.profile;\n              this.persistToken(authResponse.access_token);\n              resolve(user);\n            });\n          }\n        });\n      });\n    }\n\n    signOut() {\n      return new Promise((resolve, reject) => {\n        try {\n          amazon.Login.logout();\n          this.clearToken();\n          resolve();\n        } catch (err) {\n          reject(err.message);\n        }\n      });\n    }\n\n    persistToken(token) {\n      localStorage.setItem(`${AmazonLoginProvider.PROVIDER_ID}_token`, token);\n    }\n\n    retrieveToken() {\n      return localStorage.getItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n    }\n\n    clearToken() {\n      localStorage.removeItem(`${AmazonLoginProvider.PROVIDER_ID}_token`);\n    }\n\n  }\n\n  AmazonLoginProvider.PROVIDER_ID = 'AMAZON';\n  return AmazonLoginProvider;\n})();\nlet VKLoginProvider = /*#__PURE__*/(() => {\n  class VKLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions = {\n      fields: 'photo_max,contacts',\n      version: '5.124'\n    }) {\n      super();\n      this.clientId = clientId;\n      this.initOptions = initOptions;\n      this.VK_API_URL = '//vk.com/js/api/openapi.js';\n      this.VK_API_GET_USER = 'users.get';\n    }\n\n    initialize() {\n      return new Promise((resolve, reject) => {\n        try {\n          this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {\n            VK.init({\n              apiId: this.clientId\n            });\n            resolve();\n          });\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n\n    getLoginStatus() {\n      return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));\n    }\n\n    signIn() {\n      return new Promise((resolve, reject) => this.signInInternal(resolve, reject));\n    }\n\n    signOut() {\n      return new Promise((resolve, reject) => {\n        VK.Auth.logout(response => {\n          resolve();\n        });\n      });\n    }\n\n    signInInternal(resolve, reject) {\n      VK.Auth.login(loginResponse => {\n        if (loginResponse.status === 'connected') {\n          this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n        }\n      });\n    }\n\n    getUser(userId, token, resolve) {\n      VK.Api.call(this.VK_API_GET_USER, {\n        user_id: userId,\n        fields: this.initOptions.fields,\n        v: this.initOptions.version\n      }, userResponse => {\n        resolve(this.createUser(Object.assign({}, {\n          token\n        }, userResponse.response[0])));\n      });\n    }\n\n    getLoginStatusInternal(resolve, reject) {\n      VK.Auth.getLoginStatus(loginResponse => {\n        if (loginResponse.status === 'connected') {\n          this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);\n        }\n      });\n    }\n\n    createUser(response) {\n      const user = new SocialUser();\n      user.id = response.id;\n      user.name = `${response.first_name} ${response.last_name}`;\n      user.photoUrl = response.photo_max;\n      user.authToken = response.token;\n      return user;\n    }\n\n  }\n\n  VKLoginProvider.PROVIDER_ID = 'VK';\n  /**\n   * Protocol modes supported by MSAL.\n   */\n\n  return VKLoginProvider;\n})();\nvar ProtocolMode = /*#__PURE__*/(() => {\n  (function (ProtocolMode) {\n    ProtocolMode[\"AAD\"] = \"AAD\";\n    ProtocolMode[\"OIDC\"] = \"OIDC\";\n  })(ProtocolMode || (ProtocolMode = {}));\n\n  return ProtocolMode;\n})();\nconst COMMON_AUTHORITY = 'https://login.microsoftonline.com/common/';\n/**\n * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser\n */\n\nlet MicrosoftLoginProvider = /*#__PURE__*/(() => {\n  class MicrosoftLoginProvider extends BaseLoginProvider {\n    constructor(clientId, initOptions) {\n      super();\n      this.clientId = clientId;\n      this.initOptions = {\n        authority: COMMON_AUTHORITY,\n        scopes: ['openid', 'email', 'profile', 'User.Read'],\n        knownAuthorities: [],\n        protocolMode: ProtocolMode.AAD,\n        clientCapabilities: [],\n        cacheLocation: 'sessionStorage'\n      };\n      this.initOptions = Object.assign(Object.assign({}, this.initOptions), initOptions);\n    }\n\n    initialize() {\n      return new Promise((resolve, reject) => {\n        this.loadScript(MicrosoftLoginProvider.PROVIDER_ID, 'https://alcdn.msauth.net/browser/2.13.1/js/msal-browser.js', () => {\n          var _a;\n\n          try {\n            const config = {\n              auth: {\n                clientId: this.clientId,\n                redirectUri: (_a = this.initOptions.redirect_uri) !== null && _a !== void 0 ? _a : location.origin,\n                authority: this.initOptions.authority,\n                knownAuthorities: this.initOptions.knownAuthorities,\n                protocolMode: this.initOptions.protocolMode,\n                clientCapabilities: this.initOptions.clientCapabilities\n              },\n              cache: !this.initOptions.cacheLocation ? null : {\n                cacheLocation: this.initOptions.cacheLocation\n              }\n            };\n            this._instance = new msal.PublicClientApplication(config);\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        });\n      });\n    }\n\n    getSocialUser(loginResponse) {\n      return new Promise((resolve, reject) => {\n        //After login, use Microsoft Graph API to get user info\n        let meRequest = new XMLHttpRequest();\n\n        meRequest.onreadystatechange = () => {\n          if (meRequest.readyState == 4) {\n            try {\n              if (meRequest.status == 200) {\n                let userInfo = JSON.parse(meRequest.responseText);\n                let user = new SocialUser();\n                user.provider = MicrosoftLoginProvider.PROVIDER_ID;\n                user.id = loginResponse.idToken;\n                user.authToken = loginResponse.accessToken;\n                user.name = loginResponse.idTokenClaims.name;\n                user.email = loginResponse.account.username;\n                user.idToken = loginResponse.idToken;\n                user.response = loginResponse;\n                user.firstName = userInfo.givenName;\n                user.lastName = userInfo.surname;\n                resolve(user);\n              } else {\n                reject(`Error retrieving user info: ${meRequest.status}`);\n              }\n            } catch (err) {\n              reject(err);\n            }\n          }\n        }; //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http\n\n\n        meRequest.open('GET', 'https://graph.microsoft.com/v1.0/me');\n        meRequest.setRequestHeader('Authorization', `Bearer ${loginResponse.accessToken}`);\n\n        try {\n          meRequest.send();\n        } catch (err) {\n          reject(err);\n        }\n      });\n    }\n\n    getLoginStatus() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const accounts = this._instance.getAllAccounts();\n\n        if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n          const loginResponse = yield this._instance.ssoSilent({\n            scopes: this.initOptions.scopes,\n            loginHint: accounts[0].username\n          });\n          return yield this.getSocialUser(loginResponse);\n        } else {\n          throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;\n        }\n      });\n    }\n\n    signIn() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const loginResponse = yield this._instance.loginPopup({\n          scopes: this.initOptions.scopes\n        });\n        return yield this.getSocialUser(loginResponse);\n      });\n    }\n\n    signOut(revoke) {\n      var _a, _b;\n\n      return __awaiter(this, void 0, void 0, function* () {\n        const accounts = this._instance.getAllAccounts();\n\n        if ((accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n          yield this._instance.logoutPopup({\n            account: accounts[0],\n            postLogoutRedirectUri: (_b = (_a = this.initOptions.logout_redirect_uri) !== null && _a !== void 0 ? _a : this.initOptions.redirect_uri) !== null && _b !== void 0 ? _b : location.href\n          });\n        }\n      });\n    }\n\n  }\n\n  MicrosoftLoginProvider.PROVIDER_ID = 'MICROSOFT';\n  /**\n   * Generated bundle index. Do not edit.\n   */\n\n  return MicrosoftLoginProvider;\n})();\nexport { AmazonLoginProvider, BaseLoginProvider, DummyLoginProvider, FacebookLoginProvider, GoogleLoginProvider, MicrosoftLoginProvider, SocialAuthService, SocialLoginModule, SocialUser, VKLoginProvider }; //# sourceMappingURL=angularx-social-login.js.map","map":null,"metadata":{},"sourceType":"module"}